C51 COMPILER V9.02   F39X_COMM_SMB0                                                        03/15/2013 16:18:47 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE F39X_COMM_SMB0
OBJECT MODULE PLACED IN F39x_Comm_SMB0.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe F39x_Comm_SMB0.c DB OE BR INCDIR(C:\SiLabs\MCU\Inc) ROM(SMALL) OT(11,SIZE)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // F33x_Comm_SMB0.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright (C) 2010 Silicon Laboratories, Inc.
   5          // http://www.silabs.com
   6          //
   7          // Program Description:
   8          //
   9          // [*** TEMPLATE INFORMATION ***]
  10          // Filename: Fnnn_Comm_CommType.c
  11          // nnn => Fill-in with the MCU family part number.
  12          // CommType => Fill-in Comm interface name.
  13          // Examples: F50x_Comm_CAN0.c, F34x_Comm_UART0.c
  14          //
  15          //
  16          //
  17          //
  18          // Target:         C8051Fxxx (Any Silicon Labs Flash MCU)
  19          // Tool chain:     Generic
  20          // Command Line:   None
  21          //
  22          //
  23          // Release 1.0 / 01SEP2010 (PKC)
  24          //    -Initial Revision
  25          //
  26          //-----------------------------------------------------------------------------
  27          
  28          //-----------------------------------------------------------------------------
  29          // Includes
  30          //-----------------------------------------------------------------------------
  31          #include <compiler_defs.h>
  32          #include "Fxxx_SFR_Defs_Wrapper.h"     // This header file will include the
  33                                                 // real MCU register definition file
  34          
  35          #include "Fxxx_Target_Config.h"
  36          #include "Fxxx_Target_Interface.h"
  37          
  38          #include "Fxxx_TargetBL_Config.h"
  39          #include "Fxxx_TargetBL_Interface.h"
  40          
  41          #include "Fxxx_BL131_SMB0_Interface.h"  // TODO: Change to actual file name - DONE
  42          
  43          //-----------------------------------------------------------------------------
  44          // Global CONSTANTS
  45          //-----------------------------------------------------------------------------
  46          #define RSP_OK 0x00
  47          
  48          //-----------------------
  49          // Bit Definition Masks
  50          //-----------------------
  51          
  52          // CAN0STAT
  53          #define BOff  0x80                     // Busoff Status
  54          #define EWarn 0x40                     // Warning Status
  55          #define EPass 0x20                     // Error Passive
C51 COMPILER V9.02   F39X_COMM_SMB0                                                        03/15/2013 16:18:47 PAGE 2   

  56          #define RxOk  0x10                     // Receive Message Successfully
  57          #define TxOk  0x08                     // Transmitted Message Successfully
  58          #define LEC   0x07                     // Last Error Code
  59          
  60          //-----------------------------------------------------------------------------
  61          // Global Variables
  62          //-----------------------------------------------------------------------------
  63          bit   SMB_DATA_READY;
  64          U8    SMB_NUM_BYTES;
  65          
  66          //-----------------------------------------------------------------------------
  67          // Function Prototypes (Local)
  68          //-----------------------------------------------------------------------------
  69          
  70          //=============================================================================
  71          // Function Definitions
  72          //=============================================================================
  73          
  74          //-----------------------------------------------------------------------------
  75          // SMB0_Op
  76          //-----------------------------------------------------------------------------
  77          //
  78          // Return Value:  None
  79          // Parameters:    1) SMB0_Num_Bytes - Length of pending SMB transaction
  80          //
  81          // Waits for an SMB transaction of length SMB0_Num_Bytes to complete before
  82          // returning.
  83          //-----------------------------------------------------------------------------
  84          void SMB0_Op (U8 SMB0_Num_Bytes)
  85          {
  86   1         SMB_NUM_BYTES = SMB0_Num_Bytes;
  87   1         SMB_DATA_READY = 0;
  88   1      
  89   1         // Loop until all data sent.
  90   1         do
  91   1         {
  92   2            SMBus_Handler ();
  93   2         } while (!SMB_DATA_READY);
  94   1      }
  95          
  96          //-----------------------------------------------------------------------------
  97          // Interrupt Service Routines
  98          //-----------------------------------------------------------------------------
  99          
 100          //-----------------------------------------------------------------------------
 101          // SMBus Handler
 102          //-----------------------------------------------------------------------------
 103          //
 104          // SMBus state machine
 105          // - Slave only implementation - no master states defined
 106          // - All incoming data is written to global variable <SMB_data_IN>
 107          // - All outgoing data is read from global variable <SMB_data_OUT>
 108          //
 109          void SMBus_Handler (void)
 110          {
 111   1         static U8 data * Rx_Buf_ptr;
 112   1         static U8 data * Tx_Buf_ptr;
 113   1      
 114   1         if (SI)
 115   1         {
 116   2            if (ARBLOST == 0)
 117   2            {
C51 COMPILER V9.02   F39X_COMM_SMB0                                                        03/15/2013 16:18:47 PAGE 3   

 118   3               switch (SMB0CN & 0xF0)           // Decode the SMBus status vector
 119   3               {
 120   4                  // Slave Receiver: Start+Address received
 121   4                  case  SMB_SRADD:
 122   4      
 123   4                     STA = 0;                   // Clear STA bit
 124   4      
 125   4                     Rx_Buf_ptr = &Rx_Buf[0];
 126   4                     Tx_Buf_ptr = &Tx_Buf[0];
 127   4      
 128   4                     if((SMB0DAT&0xFE) == (SMB0_SLAVE_ADDRESS&0xFE)) // Decode address
 129   4                     {                          // If the received address matches,
 130   5                        ACK = 1;                // ACK the received slave address
 131   5      
 132   5                        if((SMB0DAT&0x01) == READ) // If the transfer is a master READ,
 133   5                        {
 134   6                           // Prepare outgoing byte
 135   6                           SMB0DAT = *(Tx_Buf_ptr);
 136   6                           Tx_Buf_ptr++;
 137   6                           SMB_NUM_BYTES--;
 138   6                        }
 139   5                     }
 140   4                     else                       // If received slave address does not
 141   4                     {                          // match,
 142   5                        ACK = 0;                // NACK received address
 143   5                     }
 144   4                     break;
 145   4      
 146   4                  // Slave Receiver: Data received
 147   4                  case  SMB_SRDB:
 148   4      
 149   4                     *(Rx_Buf_ptr) = SMB0DAT;
 150   4                     Rx_Buf_ptr++;
 151   4                     SMB_NUM_BYTES--;
 152   4                     ACK = 1;                // ACK received data
 153   4                     break;
 154   4      
 155   4                  // Slave Transmitter: Data byte transmitted
 156   4                  case  SMB_STDB:
 157   4      
 158   4                     if (ACK == 1)              // If Master ACK's, send the next byte
 159   4                     {
 160   5                        // Prepare next outgoing byte
 161   5                        SMB0DAT = *(Tx_Buf_ptr);
 162   5                        Tx_Buf_ptr++;
 163   5                        SMB_NUM_BYTES--;
 164   5      //                  if (!SMB_NUM_BYTES)
 165   5      //                     SMB_DATA_READY = 1;     // Indicate new data fully received
 166   5                     }
 167   4                     break;
 168   4      
 169   4                  // Slave Receiver: Stop received while either a Slave Receiver or
 170   4                  // Slave Transmitter
 171   4                  case  SMB_SRSTO:
 172   4      
 173   4                  // Slave Transmitter: Arbitration lost, Stop detected
 174   4                  //
 175   4                  // This state will only be entered on a bus error condition.
 176   4                  // In normal operation, the slave is no longer sending data or has
 177   4                  // data pending when a STOP is received from the master, so the TXMODE
 178   4                  // bit is cleared and the slave goes to the SRSTO state.
 179   4                  case  SMB_STSTO:
C51 COMPILER V9.02   F39X_COMM_SMB0                                                        03/15/2013 16:18:47 PAGE 4   

 180   4      
 181   4                     if (!SMB_NUM_BYTES)
 182   4                        SMB_DATA_READY = 1;     // Indicate new data fully received
 183   4      
 184   4                     STO = 0;                   // STO must be cleared by software when
 185   4                                                // a STOP is detected as a slave
 186   4                     break;
 187   4      
 188   4                  // Default: all other cases undefined
 189   4                  default:
 190   4                     SMB0CN &= ~0x32;    // STA, STO, and ACK set to 0
 191   4                     break;
 192   4               }
 193   3            }
 194   2            // ARBLOST = 1, Abort failed transfer
 195   2            else
 196   2            {
 197   3               SMB0CN &= ~0x32;    // STA, STO, and ACK set to 0
 198   3            }
 199   2      
 200   2            SI = 0;                             // Clear SMBus interrupt flag
 201   2         }
 202   1      }
 203          
 204          //-----------------------------------------------------------------------------
 205          // End Of File
 206          //-----------------------------------------------------------------------------


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    109    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
