C51 COMPILER V9.02   FXXX_MASTER_TGT_COMMANDS                                              03/19/2013 14:27:31 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE FXXX_MASTER_TGT_COMMANDS
OBJECT MODULE PLACED IN Fxxx_Master_TGT_Commands.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe Fxxx_Master_TGT_Commands.c DB OE BR INCDIR(C:\SiLabs\MCU\Inc)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // Fxxx_TargetBL_Commands.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright (C) 2010 Silicon Laboratories, Inc.
   5          // http://www.silabs.com
   6          //
   7          // Program Description:
   8          //
   9          // 
  10          //
  11          // How To Test:
  12          //
  13          // 
  14          //
  15          //
  16          // Target:         C8051Fxxx (Any Silicon Labs Flash MCU)
  17          // Tool chain:     Generic
  18          // Command Line:   None
  19          //
  20          //
  21          // Release 1.0 / 01SEP2010 (PKC)
  22          //    -Initial Revision
  23          //
  24          //-----------------------------------------------------------------------------
  25          
  26          //-----------------------------------------------------------------------------
  27          // Includes
  28          //-----------------------------------------------------------------------------
  29          #include <compiler_defs.h>
  30          #include "Fxxx_SFR_Defs_Wrapper.h"     // This header file will include the
  31                                                 // real MCU register definition file
  32          
  33          #include "Fxxx_Master_Config.h"
  34          #include "Fxxx_Master_Interface.h"
  35          #include "Fxxx_Target_Interface.h"
  36          #include "Fxxx_DataSource_Interface.h"
  37          #include "Fxxx_Master_Validation.h"
  38          
  39          //-----------------------------------------------------------------------------
  40          // Global CONSTANTS
  41          //-----------------------------------------------------------------------------
  42          
  43          
  44          
  45          //-----------------------------------------------------------------------------
  46          // Global Variables
  47          //-----------------------------------------------------------------------------
  48          SEGMENT_VARIABLE (Rx_Buf[TGT_COMM_RX_BUF_LENGTH], U8, SEG_XDATA);
  49          SEGMENT_VARIABLE (Tx_Buf[TGT_COMM_TX_BUF_LENGTH], U8, SEG_XDATA);
  50          
  51          SEGMENT_VARIABLE (TGT_Info[TGT_ENUM_END_VALUE], U8, SEG_XDATA);
  52          
  53          U8 TGT_BL_InfoBlock_Len;
  54          U8 TGT_App_InfoBlock_Len;
  55          
C51 COMPILER V9.02   FXXX_MASTER_TGT_COMMANDS                                              03/19/2013 14:27:31 PAGE 2   

  56          U16 TGT_Page_Size;
  57          U16 TGT_BL_Buffer_Size;
  58          U8 TGT_CRC_Is32bit = 0; // 0=16-bit; 1=32-bit
  59          
  60          bit TGT_Write_Flash_Data_Bytes = 0;
  61          
  62          U32 TGT_App_FW_End_Addr;
  63          
  64          //-----------------------------------------------------------------------------
  65          // Function Prototypes (Local)
  66          //-----------------------------------------------------------------------------
  67          
  68          
  69          //=============================================================================
  70          // Function Definitions
  71          //=============================================================================
  72          
  73          //-----------------------------------------------------------------------------
  74          // TGT_Enter_BL_Mode
  75          //-----------------------------------------------------------------------------
  76          //
  77          // Return Value:  None
  78          // Parameters:    None
  79          //
  80          //
  81          //
  82          //-----------------------------------------------------------------------------
  83          U8 TGT_Enter_BL_Mode (U8 req_rsp_code, U8 *dev_serial)
  84          {
  85   1         // Command Format:
  86   1         // [0] Command
  87   1         // [1] Code to request or prevent a response
  88   1         // [2] [dev_serial0]
  89   1         // ...
  90   1         // [7] [dev_serial5]
  91   1      
  92   1         // Response (only if 'request_response' is active):
  93   1         // [0] Response code
  94   1         // [1] BL InfoBlock Length
  95   1         // [2] App InfoBlock Length
  96   1      
  97   1         U8 index = 0;
  98   1         U8 retval = 0;
  99   1         U8 i;
 100   1      
 101   1         Tx_Buf[index++] = TGT_CMD_ENTER_BL_MODE;
 102   1      
 103   1         Tx_Buf[index++] = req_rsp_code; // Target will send a response only if byte1 is 0x52
 104   1      
 105   1         for (i = 0; i < NUM_SERIAL_BYTES; i++)
 106   1         {
 107   2            Tx_Buf[index + i] = *(dev_serial + i);
 108   2         }
 109   1      
 110   1         Comm_Send_Tx_Bytes (TGT_CMD_FIXED_LENGTH);
 111   1      
 112   1         if (req_rsp_code == TGT_ENTER_BL_MODE_REQ_RSP_CODE)
 113   1         {
 114   2            retval = Comm_Wait_For_Rx_Bytes (3);
 115   2            TGT_BL_InfoBlock_Len = Rx_Buf[1];
 116   2            TGT_App_InfoBlock_Len = Rx_Buf[2];
 117   2         }
C51 COMPILER V9.02   FXXX_MASTER_TGT_COMMANDS                                              03/19/2013 14:27:31 PAGE 3   

 118   1      
 119   1         return (retval);
 120   1      }
 121          
 122          //-----------------------------------------------------------------------------
 123          // TGT_Get_Info
 124          //-----------------------------------------------------------------------------
 125          //
 126          // Return Value:  None
 127          // Parameters:    None
 128          //
 129          //
 130          //
 131          //-----------------------------------------------------------------------------
 132          U8 TGT_Get_Info (U8 *target_info)
 133          {
 134   1         // Command Format:
 135   1         // [0] Command
 136   1         // [1..7] xx
 137   1      
 138   1         // Response:
 139   1         // [0] Response code (ACK/ERROR etc)
 140   1         // [1] BL InfoBlock byte0 (length)
 141   1         // [2] BL InfoBlock byte1
 142   1         // [.] ...
 143   1         // [N] BL InfoBlock byte(N-1)
 144   1         // [N+1] App InfoBlock byte0 (length)
 145   1         // [N+2] App InfoBlock byte1
 146   1         // [...] ...
 147   1         // [N+M] App InfoBlock byte(M-1)
 148   1      
 149   1         U8 index = 0;
 150   1         U8 retval = 0;
 151   1         
 152   1         Tx_Buf[index++] = TGT_CMD_GET_INFO;
 153   1      
 154   1         Comm_Send_Tx_Bytes (TGT_CMD_FIXED_LENGTH);   
 155   1      
 156   1         retval = Comm_Wait_For_Rx_Bytes (TGT_BL_InfoBlock_Len +TGT_App_InfoBlock_Len + 1);
 157   1      
 158   1         if (retval == TGT_RSP_OK)
 159   1         {
 160   2            for (index = 0; index < (TGT_BL_InfoBlock_Len + TGT_App_InfoBlock_Len); index++)
 161   2            {
 162   3               target_info[index] = Rx_Buf[index+1];
 163   3            }
 164   2      
 165   2            if (TGT_App_InfoBlock_Len == 0)
 166   2            {
 167   3               target_info[index] = 0; // Set target app infoblock length to 0
 168   3            }
 169   2      
 170   2            TGT_Page_Size = (1 << target_info[TGT_FLASH_PAGE_SIZE_CODE]); // if code=n, size=2^n
 171   2            TGT_BL_Buffer_Size = (1 << (target_info[TGT_BL_BUFFER_SIZE_CODE] & 0x0F)); // if code=n, size=2^n
 172   2      
 173   2            if ((target_info[TGT_CRC_TYPE] & 0x80) == 0)
 174   2            {
 175   3               TGT_CRC_Is32bit = 0;
 176   3            }
 177   2            else
 178   2            {
 179   3               TGT_CRC_Is32bit = 1;
C51 COMPILER V9.02   FXXX_MASTER_TGT_COMMANDS                                              03/19/2013 14:27:31 PAGE 4   

 180   3            }
 181   2         }
 182   1      
 183   1         return (retval);
 184   1      }
 185          
 186          //-----------------------------------------------------------------------------
 187          // TGT_Erase_Page
 188          //-----------------------------------------------------------------------------
 189          //
 190          // Return Value:  None
 191          // Parameters:    None
 192          //
 193          //
 194          //
 195          //-----------------------------------------------------------------------------
 196          U8 TGT_Erase_Page (U8 flash_key0, U8 flash_key1, U32 addr)
 197          {
 198   1         // Command Format:
 199   1         // [0] Command
 200   1         // [1] flash key code0
 201   1         // [2] flash key code1
 202   1         // [3] addr0 (LSB)
 203   1         // [4] addr1
 204   1         // [5] addr2
 205   1         // [6] RESERVED
 206   1         // [7] RESERVED
 207   1      
 208   1         // Response:
 209   1         // [0] Response code
 210   1      
 211   1         U8 index = 0;
 212   1         U8 retval = 0;
 213   1         UU32 addr_copy;
 214   1      
 215   1         addr_copy.U32 = addr;
 216   1         
 217   1         Tx_Buf[index++] = TGT_CMD_ERASE_FLASH_PAGE;
 218   1         Tx_Buf[index++] = flash_key0;
 219   1         Tx_Buf[index++] = flash_key1;
 220   1         Tx_Buf[index++] = addr_copy.U8[b0];
 221   1         Tx_Buf[index++] = addr_copy.U8[b1];
 222   1         Tx_Buf[index++] = addr_copy.U8[b2];
 223   1      
 224   1         Comm_Send_Tx_Bytes (TGT_CMD_FIXED_LENGTH);   
 225   1      
 226   1         retval = Comm_Wait_For_Rx_Bytes (1);
 227   1        
 228   1         return (retval);
 229   1      }
 230          
 231          //-----------------------------------------------------------------------------
 232          // TGT_Write_Flash
 233          //-----------------------------------------------------------------------------
 234          //
 235          // Return Value:  None
 236          // Parameters:    None
 237          //
 238          //
 239          //
 240          //-----------------------------------------------------------------------------
 241          U8 TGT_Write_Flash (U8 *buf, U16 numbytes, U8 flash_key0, U8 flash_key1, U32 addr)
C51 COMPILER V9.02   FXXX_MASTER_TGT_COMMANDS                                              03/19/2013 14:27:31 PAGE 5   

 242          {
 243   1         // Command Format:
 244   1         // [0] Command
 245   1         // [1] flash key code0
 246   1         // [2] flash key code1
 247   1         // [3] addr0 (LSB)
 248   1         // [4] addr1
 249   1         // [5] addr2
 250   1         // [6] numbytes0 (LSB)
 251   1         // [7] numbytes1
 252   1         
 253   1         // Response:
 254   1         // [0] Response code
 255   1      
 256   1         // Bytes to write:
 257   1         // [0] byte0
 258   1         // [1] byte1
 259   1         // [.] ...
 260   1         // [numbytes-1] byte(numbytes-1)
 261   1      
 262   1         U8 index;
 263   1         U8 retval = 0;
 264   1         UU32 addr_copy;
 265   1         UU16 numbytes_this_write;
 266   1         U16 buf_index = 0;
 267   1      
 268   1         addr_copy.U32 = addr;
 269   1      
 270   1         if ((addr + numbytes) == (TGT_App_FW_End_Addr + 1))
 271   1         {
 272   2            numbytes -= 2; // This prevents the signature bytes from being written using this function
 273   2         }
 274   1         
 275   1         while (numbytes > 0)
 276   1         {
 277   2            index = 0;
 278   2            Tx_Buf[index++] = TGT_CMD_WRITE_FLASH_BYTES;
 279   2            Tx_Buf[index++] = flash_key0;
 280   2            Tx_Buf[index++] = flash_key1;
 281   2            Tx_Buf[index++] = addr_copy.U8[b0];
 282   2            Tx_Buf[index++] = addr_copy.U8[b1];
 283   2            Tx_Buf[index++] = addr_copy.U8[b2];
 284   2      
 285   2            if (numbytes > TGT_BL_Buffer_Size)
 286   2            {
 287   3               numbytes_this_write.U16 = TGT_BL_Buffer_Size;
 288   3            }
 289   2            else
 290   2            {
 291   3               numbytes_this_write.U16 = numbytes;
 292   3            }
 293   2      
 294   2            Tx_Buf[index++] = numbytes_this_write.U8[LSB];
 295   2            Tx_Buf[index++] = numbytes_this_write.U8[MSB];
 296   2      
 297   2            Comm_Send_Tx_Bytes (TGT_CMD_FIXED_LENGTH);   
 298   2      
 299   2            // Get response for the command
 300   2            retval = Comm_Wait_For_Rx_Bytes (1);
 301   2      
 302   2            if (retval != TGT_RSP_OK)
 303   2            {
C51 COMPILER V9.02   FXXX_MASTER_TGT_COMMANDS                                              03/19/2013 14:27:31 PAGE 6   

 304   3               Last_Error = ERR_TGT_UNEXPECTED_RSP;
 305   3               break;
 306   3            }
 307   2      
 308   2            TGT_Write_Flash_Data_Bytes = 1;
 309   2      
 310   2            for (index = 0; index < numbytes_this_write.U16; index++)
 311   2            {
 312   3               Tx_Buf[index] = *(buf + buf_index);
 313   3               buf_index++;
 314   3            }
 315   2      
 316   2            Comm_Send_Tx_Bytes (numbytes_this_write.U16);   
 317   2      
 318   2            TGT_Write_Flash_Data_Bytes = 0;
 319   2      
 320   2            numbytes -= numbytes_this_write.U16;
 321   2      
 322   2            if (numbytes > 0)
 323   2            {
 324   3               // Increment addr to point to next block of bytes
 325   3               addr_copy.U32 += numbytes_this_write.U16; 
 326   3      
 327   3               // Get response for the command
 328   3               retval = Comm_Wait_For_Rx_Bytes (1);
 329   3      
 330   3               if (retval != TGT_RSP_OK)
 331   3               {
 332   4                  Last_Error = ERR_TGT_UNEXPECTED_RSP;
 333   4                  break;
 334   4               }
 335   3            }
 336   2         }
 337   1      
 338   1         if (Last_Error == 0)
 339   1         {
 340   2            // Get final response if no errors above
 341   2            retval = Comm_Wait_For_Rx_Bytes (1);
 342   2         }
 343   1         
 344   1         return (retval);
 345   1      }
 346          
 347          //-----------------------------------------------------------------------------
 348          // TGT_Get_Page_CRC
 349          //-----------------------------------------------------------------------------
 350          //
 351          // Return Value:  None
 352          // Parameters:    None
 353          //
 354          //
 355          //
 356          //-----------------------------------------------------------------------------
 357          U8 TGT_Get_Page_CRC (U32 addr, U32 *target_page_crc)
 358          {
 359   1         // Command Format:
 360   1         // [0] Command
 361   1         // [1] addr0 (LSB)
 362   1         // [2] addr1
 363   1         // [3] addr2
 364   1         // [4] RESERVED
 365   1         // [5] xx
C51 COMPILER V9.02   FXXX_MASTER_TGT_COMMANDS                                              03/19/2013 14:27:31 PAGE 7   

 366   1         // [6] xx
 367   1         // [7] xx
 368   1      
 369   1         // Response:
 370   1         // [0] Response code
 371   1         // [1] crc0 (LSB)
 372   1         // [2] crc1
 373   1         // [3] [crc2]
 374   1         // [4] [crc3]
 375   1      
 376   1         U8 index = 0;
 377   1         U8 retval = 0;
 378   1         UU32 addr_copy;
 379   1         UU32 crc;
 380   1      
 381   1         addr_copy.U32 = addr;
 382   1         
 383   1         Tx_Buf[index++] = TGT_CMD_GET_PAGE_CRC;
 384   1         Tx_Buf[index++] = addr_copy.U8[b0];
 385   1         Tx_Buf[index++] = addr_copy.U8[b1];
 386   1         Tx_Buf[index++] = addr_copy.U8[b2];
 387   1      
 388   1         Comm_Send_Tx_Bytes (TGT_CMD_FIXED_LENGTH);   
 389   1      
 390   1         crc.U32 = 0;
 391   1      
 392   1         if (TGT_CRC_Is32bit == 0)
 393   1         {
 394   2            retval = Comm_Wait_For_Rx_Bytes (3);
 395   2            crc.U8[b0] = Rx_Buf[1];
 396   2            crc.U8[b1] = Rx_Buf[2];
 397   2         }
 398   1         else
 399   1         {
 400   2            retval = Comm_Wait_For_Rx_Bytes (5);
 401   2            crc.U8[b0] = Rx_Buf[1];
 402   2            crc.U8[b1] = Rx_Buf[2];
 403   2            crc.U8[b2] = Rx_Buf[3];
 404   2            crc.U8[b3] = Rx_Buf[4];
 405   2         }
 406   1      
 407   1         *target_page_crc = crc.U32;
 408   1        
 409   1         return (retval);
 410   1      }
 411          
 412          //-----------------------------------------------------------------------------
 413          // TGT_Write_Signature
 414          //-----------------------------------------------------------------------------
 415          //
 416          // Return Value:  None
 417          // Parameters:    None
 418          //
 419          //
 420          //
 421          //-----------------------------------------------------------------------------
 422          U8 TGT_Write_Signature (U8 flash_key0, U8 flash_key1, U8 sig_byte0, U8 sig_byte1)
 423          {
 424   1         // Command Format:
 425   1         // [0] Command
 426   1         // [1] flash key code0
 427   1         // [2] flash key code1
C51 COMPILER V9.02   FXXX_MASTER_TGT_COMMANDS                                              03/19/2013 14:27:31 PAGE 8   

 428   1         // [3] signature byte0
 429   1         // [4] signature byte1
 430   1         // [5] RESERVED
 431   1         // [6] RESERVED
 432   1         // [7] RESERVED
 433   1      
 434   1         // Response:
 435   1         // [0] Response code
 436   1      
 437   1         U8 index = 0;
 438   1         U8 retval = 0;
 439   1        
 440   1         Tx_Buf[index++] = TGT_CMD_WRITE_SIGNATURE;
 441   1         Tx_Buf[index++] = flash_key0;
 442   1         Tx_Buf[index++] = flash_key1;
 443   1         Tx_Buf[index++] = sig_byte0;
 444   1         Tx_Buf[index++] = sig_byte1;
 445   1      
 446   1         Comm_Send_Tx_Bytes (TGT_CMD_FIXED_LENGTH);   
 447   1      
 448   1         retval = Comm_Wait_For_Rx_Bytes (1);
 449   1        
 450   1         return (retval);
 451   1      }
 452          
 453          //-----------------------------------------------------------------------------
 454          // TGT_Reset_MCU
 455          //-----------------------------------------------------------------------------
 456          //
 457          // Return Value:  None
 458          // Parameters:    None
 459          //
 460          //
 461          //
 462          //-----------------------------------------------------------------------------
 463          U8 TGT_Reset_MCU (void)
 464          {
 465   1         // Command Format:
 466   1         // [0] Command
 467   1         // [1..7] xx
 468   1      
 469   1         // Response:
 470   1         // [0] Response code
 471   1      
 472   1         U8 retval;
 473   1      
 474   1         Tx_Buf[0] = TGT_CMD_RESET_MCU;
 475   1      
 476   1         Comm_Send_Tx_Bytes (TGT_CMD_FIXED_LENGTH);   
 477   1      
 478   1         retval = Comm_Wait_For_Rx_Bytes (1);
 479   1        
 480   1         return (retval);
 481   1      }
 482          
 483          //-----------------------------------------------------------------------------
 484          // End Of File
 485          //-----------------------------------------------------------------------------


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1168    ----
C51 COMPILER V9.02   FXXX_MASTER_TGT_COMMANDS                                              03/19/2013 14:27:31 PAGE 9   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   1178    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11      59
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
